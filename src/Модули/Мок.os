#Использовать strings
#Использовать logos

#Использовать "./internal"

Перем Лог;
Перем ИменаМетодов;

Функция Получить(Знач ИсходныйОбъект) Экспорт
	
	ФейковыйОбъект = СоздатьМок(ИсходныйОбъект);
	Возврат ФейковыйОбъект;

КонецФункции

Функция Следить(Знач ИсходныйОбъект) Экспорт
	ФейковыйОбъект = СоздатьМок(ИсходныйОбъект, Истина);
	Возврат ФейковыйОбъект;
КонецФункции

Функция СоздатьМок(Знач ИсходныйОбъект, Знач ЭтоШпион = Ложь)

	ИменаМетодов = Новый Соответствие;
	Лог.Отладка("Тип исходного объекта: %1", ТипЗнч(ИсходныйОбъект));
	Лог.Отладка("Представление исходного объекта: %1", ИсходныйОбъект);

	РежимСозданияИзТипа = ТипЗнч(ИсходныйОбъект) = Тип("Тип");

	Рефлектор = Новый Рефлектор;
	Методы = Рефлектор.ПолучитьТаблицуМетодов(ИсходныйОбъект);
	Свойства = Рефлектор.ПолучитьТаблицуСвойств(ИсходныйОбъект);
	
	Лог.Отладка("Количество свойств: %1", Свойства.Количество());
	Лог.Отладка("Количество методов: %1", Методы.Количество());
	
	ПутьКФейковомуОбъекту = ОбъединитьПути(ТекущийСценарий().Каталог, "..", "Модули", "МокОбъектСлужебный.os");
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.Прочитать(ПутьКФейковомуОбъекту, КодировкаТекста.UTF8NoBom);
	ФейковыйОбъектСтрокой = ТекстовыйДокумент.ПолучитьТекст();
	ТекстовыйДокумент = Неопределено;
	
	ОбластьПеременных = "";
	ШаблонПеременной = "Перем %1 Экспорт;" + Символы.ПС;
	Для Каждого Свойство Из Свойства Цикл
		ОбластьПеременных = ОбластьПеременных + СтрШаблон(ШаблонПеременной, Свойство.Имя); 
	КонецЦикла;
	
	ОбластьМетодов = "";
	
	ПутьКФейковомуОбъекту = ОбъединитьПути(ТекущийСценарий().Каталог, "..", "Модули", "ШаблонМокМетода.os_template");
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.Прочитать(ПутьКФейковомуОбъекту, КодировкаТекста.UTF8NoBom);
	ШаблонМетода = ТекстовыйДокумент.ПолучитьТекст();
	ТекстовыйДокумент = Неопределено;

	АннотацииПоддерживаются = Истина;
	Если Методы.Колонки.Найти("Аннотации") = Неопределено Тогда
		АннотацииПоддерживаются = Ложь;
	КонецЕсли;	

	ШаблонОписанияПараметра = "%1 Парам%2 = Неопределено";
	ШаблонСтруктураПараметрыПроцедуры = Символы.Таб + "Мок_СтруктураПараметрыПроцедуры.Вставить(""Парам%1"", Парам%1);";

	Для Каждого Метод Из Методы Цикл
		
		Если Не Метод.Экспорт Тогда
			Продолжить;
		КонецЕсли;
		
		МассивСтрокаПараметров = Новый Массив;
		МассивСтрока_Мок_СтруктураПараметрыПроцедуры = Новый Массив;
		сч = 1;
		Для Каждого ПараметрМетода Из Метод.Параметры Цикл
			сч = сч + 1;

			СтрокаАннотацийПараметров = "";
			Если АннотацииПоддерживаются Тогда
				СтрокаАннотацийПараметров = ПолучитьСтрокуАннотаций(ПараметрМетода);
			КонецЕсли;

			МассивСтрокаПараметров.Добавить(СтрШаблон(ШаблонОписанияПараметра, СтрокаАннотацийПараметров, сч));
			СтрокаПараметрыПроцедуры = СтрШаблон(ШаблонСтруктураПараметрыПроцедуры, сч);
			МассивСтрока_Мок_СтруктураПараметрыПроцедуры.Добавить(СтрокаПараметрыПроцедуры);
		КонецЦикла;

		СтрокаПараметров = СтрСоединить(МассивСтрокаПараметров, ",");
		Строка_Мок_СтруктураПараметрыПроцедуры = СтрСоединить(МассивСтрока_Мок_СтруктураПараметрыПроцедуры, Символы.ПС);
	
		СтрокаАннотацийМетода = "";
		Если АннотацииПоддерживаются Тогда
			СтрокаАннотацийМетода = ПолучитьСтрокуАннотаций(Метод);
		КонецЕсли;
		
		ТипНачалоМетода = ?(Метод.ЭтоФункция, "Функция", "Процедура");
		ТипКонецМетода = ?(Метод.ЭтоФункция, "КонецФункции", "КонецПроцедуры");
		// ВозвращаемоеЗначение = ?(Метод.ЭтоФункция, "Возврат Мок_ВозвращаемоеИзМетодаЗначение;", "");
		ВозвращаемоеЗначение = "Возврат Мок_ВозвращаемоеИзМетодаЗначение;"; 
		ТипМетода = "Мок_ТипМетода = " + Формат(Метод.ЭтоФункция, "БЛ=Ложь; БИ=Истина") + ";";
		
		НовыйМетод = ШаблонМетода;
		// НовыйМетод = СтрЗаменить(НовыйМетод, "Функция", ТипНачалоМетода);
		НовыйМетод = СтрЗаменить(НовыйМетод, "Мок_ИмяФункции", ПолучитьИмяМетода(Метод.Имя));
		НовыйМетод = СтрЗаменить(НовыйМетод, "// {Мок_ТипМетода}", ТипМетода);
		НовыйМетод = СтрЗаменить(НовыйМетод, "Мок_ПараметрыПроцедуры", СтрокаПараметров);
		НовыйМетод = СтрЗаменить(НовыйМетод, "// {Возвращаемое значение}", ВозвращаемоеЗначение);
		НовыйМетод = СтрЗаменить(НовыйМетод, "// {Мок_СтруктураПараметрыПроцедуры}", Строка_Мок_СтруктураПараметрыПроцедуры);
		// НовыйМетод = СтрЗаменить(НовыйМетод, "КонецФункции", ТипКонецМетода);
		НовыйМетод = СтрЗаменить(НовыйМетод, "// {АннотацияМетода}", СтрокаАннотацийМетода);
		НовыйМетод = НовыйМетод + Символы.ПС;

		ОбластьМетодов = ОбластьМетодов + НовыйМетод;
	КонецЦикла;
	
	ОбластьИнициализации = "";
	ОбластьИнициализации = ОбластьИнициализации + "Мок_ЭтоШпион = " + Формат(ЭтоШпион, "БЛ=Ложь; БИ=Истина") + ";" + Символы.ПС;

	ФейковыйОбъектСтрокой = СтрЗаменить(ФейковыйОбъектСтрокой, "// {Область переменных}", ОбластьПеременных);
	ФейковыйОбъектСтрокой = СтрЗаменить(ФейковыйОбъектСтрокой, "// {Область методов}", ОбластьМетодов);
	ФейковыйОбъектСтрокой = СтрЗаменить(ФейковыйОбъектСтрокой, "// {Инициализация}", ОбластьИнициализации);

	Лог.Отладка(ФейковыйОбъектСтрокой);

	ФейковыйОбъект = ЗагрузитьСценарийИзСтроки(ФейковыйОбъектСтрокой);
	
	Если РежимСозданияИзТипа Тогда
		Попытка 
			ИнстансИсходногоОбъекта = Новый(ИсходныйОбъект);
		Исключение
			Если ЭтоШпион Тогда
				ВызватьИсключение "Невозможно создать объект и данного типа объекта";
			КонецЕсли;
			ИнстансИсходногоОбъекта = Неопределено;
		КонецПопытки;
	Иначе
		ИнстансИсходногоОбъекта = ИсходныйОбъект;
	КонецЕсли;

	ФейковыйОбъект.Мок_УстановитьМокируемыйОбъект(ИнстансИсходногоОбъекта);
	ФейковыйОбъект.Мок_УстановитьИменаМетодов(ИменаМетодов);
	
	Если ИнстансИсходногоОбъекта <> Неопределено Тогда
		ИменаСвойств = Новый Массив; 
		Для Каждого СтрокаСвойства Из Свойства Цикл
			ИменаСвойств.Добавить(СтрокаСвойства.Имя);	
		КонецЦикла;
		
		ЗаполнитьЗначенияСвойств(ФейковыйОбъект, ИнстансИсходногоОбъекта, СтрСоединить(ИменаСвойств, ","));
	КонецЕсли;

	Возврат ФейковыйОбъект;

КонецФункции

Функция ПолучитьСтрокуАннотаций(ВладелецАннотации)

	ШаблонАннотации = "&%1%2";
	СтрокаАннотаций = "";

	Если ВладелецАннотации.Аннотации = Неопределено Тогда
		Возврат СтрокаАннотаций;
	КонецЕсли;	

	КоллекцияАннотаций = Новый Соответствие;
	АннотацииСАмперсандом = Новый Массив;
	Для Каждого Аннотация Из ВладелецАннотации.Аннотации Цикл
		СтрокаПараметры = ПолучитьСтрокуПараметровАннотаций(Аннотация);
		АннотацииСАмперсандом.Добавить(СтрШаблон(ШаблонАннотации, Аннотация.Имя, СтрокаПараметры));
	КонецЦикла;	

	СтрокаАннотаций = СтрСоединить(АннотацииСАмперсандом, Символы.ПС);


	Возврат СтрокаАннотаций;
КонецФункции	

Функция ПолучитьСтрокуПараметровАннотаций(Аннотация)
	СтрокаМетодов = "";
	Если Аннотация.Параметры = Неопределено Тогда
		Возврат СтрокаМетодов;
	КонецЕсли;	

	ШаблонПараметров = "%1 %2 %3";
	ПараметрыДляСтроки = Новый Массив;

	Для Каждого Параметр Из Аннотация.Параметры Цикл
		СтрокаРавно = "";
	
		Если ЗначениеЗаполнено(Параметр.Имя) И ЗначениеЗаполнено(Параметр.Значение) Тогда
			СтрокаРавно = "=";
		КонецЕсли;	
	
		ЗначенияПараметраСтрокой = ПолучитьЗначениеПараметраВСтроку(Параметр.Значение);			
		СтрокаПараметров = СтрШаблон(ШаблонПараметров, Параметр.Имя, СтрокаРавно, ЗначенияПараметраСтрокой);
		ПараметрыДляСтроки.Добавить(СтрокаПараметров);
	КонецЦикла;

	ШаблонСтроки = "(%1)";
	СтрокаМетодов = СтрСоединить(ПараметрыДляСтроки, ",");

	Возврат СтрШаблон(ШаблонСтроки, СтрокаМетодов);
КонецФункции

Функция ПолучитьЗначениеПараметраВСтроку(Знач ЗначениеПараметра)
	
	ВозвращаемоеЗначение = Неопределено;

	Если ТипЗнч(ЗначениеПараметра) = Тип("Строка") Тогда
		ВозвращаемоеЗначение = Символ(34) + ЗначениеПараметра + Символ(34) ;
	ИначеЕсли ТипЗнч(ЗначениеПараметра) = Тип("Число")	Тогда
		ВозвращаемоеЗначение = ЗначениеПараметра;
	ИначеЕсли ТипЗнч(ЗначениеПараметра) = Тип("Булево") Тогда
		ВозвращаемоеЗначение = Формат(ЗначениеПараметра, "БЛ=Ложь; БИ=Истина");
	Иначе
		ВозвращаемоеЗначение = "";
	КонецЕсли;	


	Возврат ВозвращаемоеЗначение;
КонецФункции	

Функция ПолучитьИмяМетода(Знач ИмяМетода)
	ВозвращаемоеЗначение = ИмяМетода;
	ШаблонНовогоИмени = "_%1";	

	НедопустимыеИмена = Новый Массив;
	НедопустимыеИмена.Добавить("найти");

	Если НЕ НедопустимыеИмена.Найти(Нрег(ИмяМетода)) = Неопределено Тогда
		ВозвращаемоеЗначение = СтрШаблон(ШаблонНовогоИмени, ИмяМетода);
	КонецЕсли;	

	ИменаМетодов.Вставить(ВозвращаемоеЗначение, ИмяМетода);
	Возврат ВозвращаемоеЗначение;
КонецФункции
Лог = Логирование.ПолучитьЛог("oscript.lib.moskito");

